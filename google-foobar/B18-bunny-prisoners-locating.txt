Mounting /home/malatajit...
Welcome to foobar version 1-326-g8328491-beta (2020-06-17T01:00:47.197163)
With one last roar of the escape pod's engines, you and your bunny companions jump to lightspeed. Congratulations! You've destroyed the LAMBCHOP, rescued the bunnies, gotten Commander Lambda off your tail, and saved the galaxy. Time for a little rest and relaxation back on Bunny Planet. Pat yourself on the back - you've earned it!
foobar:~/ malatajit$ cd bunny-prisoner-locating/
foobar:~/bunny-prisoner-locating malatajit$ ls
Solution.java
constraints.txt
readme.txt
solution.py
foobar:~/bunny-prisoner-locating malatajit$ cat readme.txt 
Bunny Prisoner Locating
=======================

Keeping track of Commander Lambda's many bunny prisoners is starting to get tricky. You've been tasked with writing a program to match bunny prisoner IDs to cell locations.

The LAMBCHOP doomsday device takes up much of the interior of Commander Lambda's space station, and as a result the prison blocks have an unusual layout. They are stacked in a triangular shape, and the bunny prisoners are given numerical IDs starting from the corner, as follows:

| 7
| 4 8
| 2 5 9
| 1 3 6 10

Each cell can be represented as points (x, y), with x being the distance from the vertical wall, and y being the height from the ground. 

For example, the bunny prisoner at (1, 1) has ID 1, the bunny prisoner at (3, 2) has ID 9, and the bunny prisoner at (2,3) has ID 8. This pattern of numbering continues indefinitely (Commander Lambda has been taking a LOT of prisoners). 

Write a function solution(x, y) which returns the prisoner ID of the bunny at location (x, y). Each value of x and y will be at least 1 and no greater than 100,000. Since the prisoner ID can be very large, return your solution as a string representation of the number.

Languages
=========

To provide a Java solution, edit Solution.java
To provide a Python solution, edit solution.py

Test cases
==========
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.

-- Java cases --
Input:
Solution.solution(3, 2)
Output:
    9

Input:
Solution.solution(5, 10)
Output:
    96

-- Python cases --
Input:
solution.solution(5, 10)
Output:
    96

Input:
solution.solution(3, 2)
Output:
    9

Use verify [file] to test your solution and see how it does. When you are finished editing your code, use submit [file] to submit your answer. If your solution passes the test cases, it will be removed from your home folder.
foobar:~/bunny-prisoner-locating malatajit$ cat Solution.java 
public​ ​class​ ​Solution​ ​{
​ ​​ ​​ ​​ ​public​ ​static​ ​String​ ​solution(long​ ​x,​ ​long​ ​y)​ ​{
​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​//Your​ ​code​ ​here
​ ​​ ​​ ​​ ​}
}
foobar:~/bunny-prisoner-locating malatajit$ cat solution.py 
def​ ​solution(x,​ ​y):
​ ​​ ​​ ​​ ​#​ ​Your​ ​code​ ​here
foobar:~/bunny-prisoner-locating malatajit$ 


foobar:~/bunny-prisoner-locating malatajit$ verify solution.py 
Verifying solution...
All test cases passed. Use submit solution.py to submit your solution
foobar:~/bunny-prisoner-locating malatajit$ submit solution.py 
Are you sure you want to submit your solution?
[Y]es or [N]o: Y
Submitting solution...
Submission: SUCCESSFUL. Completed in: 1 day, 9 hrs, 32 mins, 35 secs.


      /@                                            /@                                            /@
   @~/@     @@                                   @~/@     @@                                   @~/@     @@
  @~~/ %   @$%@                                 @~~/ %   @$%@                                 @~~/ %   @$%@
 @~(((((%/////@                                @~(((((%/////@                                @~(((((%/////@
 @((/////@~//~~@                               @((/////@~//~~@                               @((/////@~//~~@
 @(/// @//////@                                @(/// @//////@                                @(/// @//////@
  @//% @~~~/~@                                  @//% @~~~/~@                                  @//% @~~~/~@
 /@$$$ @///~~/@                                /@$$$ @///~~/@                                /@$$$ @///~~/@
@        ////@@                               @        ////@@                               @        ////@@
@$   //@@@((/~ @                              @$   //@@@((/~ @                              @$   //@@@((/~ @
  //@    @  ((///@                          @$  //@    @  ((///@                          @$  //@    @  ((///@
     (@@@  ((((//%%@                       @$      (@@@  ((((//%%@                       @$      (@@@  ((((//%%@                       @$
               ((//                        @                 ((//                        @                 ((//                        @
 ~        (((((((((  /%//////@@     //@      @ ~        (((((((((  /%//////@@     //@      @ ~        (((((((((  /%//////@@     //@
 @~                 %  ~~~~~~~~/   /@$         @~                 %  ~~~~~~~~/   /@$         @~                 %  ~~~~~~~~/   /@$
     @@/$             ~~~~~////////$               @@/$             ~~~~~////////$               @@/$             ~~~~~////////$
       //@@@%%/~~      ~~~~~~~~~~///@                //@@@%%/~~      ~~~~~~~~~~///@                //@@@%%/~~      ~~~~~~~~~~///@
        ~~~          ~~~~~~~//////@$@@                ~~~          ~~~~~~~//////@$@@                ~~~          ~~~~~~~//////@$@@
    $$$                   ~~~~((((///////@        $$$                   ~~~~((((///////@        $$$                   ~~~~((((///////@
  $~~~~ %%%   /         ~~~~(////////(($@       $~~~~ %%%   /         ~~~~(////////(($@       $~~~~ %%%   /         ~~~~(////////(($@
 @$$~~ @   $$/            ~~~~((((((%%%@       @$$~~ @   $$/            ~~~~((((((%%%@       @$$~~ @   $$/            ~~~~((((((%%%@
 \\@@@@                   (((((((%%%%%@        \\@@@@                   (((((((%%%%%@        \\@@@@                   (((((((%%%%%@
                          $$$$$$$$$@                                    $$$$$$$$$@                                    $$$$$$$$$@
                        $$$%%%%%%@                                    $$$%%%%%%@                                    $$$%%%%%%@
                      $$%%%%%%%%@                                   $$%%%%%%%%@                                   $$%%%%%%%%@
                  @ /// $$%%%%%%@                               @ /// $$%%%%%%@                               @ /// $$%%%%%%@
               @////       @@@@@                             @////       @@@@@                             @////       @@@@@
               @////@@@@@@@@@                                @////@@@@@@@@@                                @////@@@@@@@@@
              @////@                                        @////@                                        @////@



<encrypted>
FkYfFBcCDxoHSkFWQVMGGAwVGUZAQVMCBQUYCAALFBFGSlNUSgQfFREEBwwQSk1MRhEHDAYGGRJL QU5BTQAaDhMJBR0DBgxTQUFLABcJAwwCCAwJDwBGSlNUShQCDRsCAQwQSk1MRgYACAsdGRJLQU5B TRoVCwRLTVRGDAYbSkFWQVMWAwdVShw= </encrypted>

For your eyes only!

Use the status command to repeat this message.

You've completed all the challenges!
If you'd like to know when more challenges are added, let us know your email address below.
We will use your information in accordance with Google's Privacy Policy.
[#1] Would you like to be notified when a new set of challenges are available to play?
[Y]es [N]o: Y
[#2] Email:ajitnilakantan@gmail.com
Are the above details correct?
[Y]es or [N]o: Y
Submitting your response...
Great! We'll let you know when a new set of challenges are ready for you.
